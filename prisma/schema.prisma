generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// AuthUser model
model AuthUser {
  id              Int       @id @default(autoincrement())
  email           String    @unique @db.VarChar(255)
  hashed_password String    @db.VarChar(255)
  full_name       String?   @db.VarChar(200)
  is_active       Boolean   @default(true)
  is_verified     Boolean   @default(false)
  created_at      DateTime  @default(now())
  updated_at      DateTime? @updatedAt
  last_login      DateTime?

  // Relations
  refresh_tokens RefreshToken[]
  chats         Chat[]
  events        Event[]

  @@map("auth_users")
}

model RefreshToken {
  id         Int       @id @default(autoincrement())
  token      String    @unique @db.VarChar(255)
  user_id    Int       @map("user_id")
  expires_at DateTime
  created_at DateTime  @default(now())
  is_revoked Boolean   @default(false)

  user       AuthUser  @relation(fields: [user_id], references: [id])

  @@map("refresh_tokens")
}

model Chat {
  id                Int                @id @default(autoincrement())
  title             String             @default("") @db.VarChar(255)
  owner_id          Int                @map("owner_id")
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  scenario_key      String?            @db.VarChar(100)
  feature           String             @default("chat") @db.VarChar(50)
  is_active         Boolean            @default(true)

  owner             AuthUser           @relation(fields: [owner_id], references: [id])
  messages          Message[]
  learningSessions  LearningSession[]

  @@map("chats")
}

model Message {
  id               Int      @id @default(autoincrement())
  chat_id          Int      @map("chat_id")
  role             String   @db.VarChar(20)
  content          String
  timestamp        DateTime @default(now())
  message_metadata Json?
  content_length   Int?

  chat             Chat     @relation(fields: [chat_id], references: [id])

  @@map("messages")
}

model Event {
  id          Int      @id @default(autoincrement())
  user_id     Int      @map("user_id")
  type        String   @db.VarChar(50)
  description String?  @db.VarChar(500)
  created_at  DateTime @default(now())

  user        AuthUser @relation(fields: [user_id], references: [id])

  @@map("events")
}

// Learning system models - User model for learning system
model User {
  id                Int                @id @default(autoincrement())
  session_id        String             @unique @db.VarChar(100) @map("session_id")
  auth_user_id      Int?               @map("auth_user_id")
  created_at        DateTime           @default(now())
  updated_at        DateTime?          @updatedAt
  last_active       DateTime?
  total_interactions Int               @default(0)
  learning_level    String            @default("intermediate") @db.VarChar(20)
  preferred_voice   String?           @db.VarChar(100)
  settings          Json?

  sessions          LearningSession[]
  analytics         AnalyticsEvent[]

  @@map("learning_users")
}

model LearningSession {
  id                    Int                   @id @default(autoincrement())
  user_id               Int                   @map("user_id")
  chat_id               Int?                  @map("chat_id")
  session_type          String                @db.VarChar(50)
  started_at            DateTime              @default(now())
  ended_at              DateTime?
  duration_minutes      Float?
  vocabulary_introduced Json?
  proverbs_shared       Json?
  topics_discussed      Json?
  strengths             Json?
  areas_for_improvement Json?
  session_data          Json?

  user                  User                  @relation(fields: [user_id], references: [id])
  chat                  Chat?                 @relation(fields: [chat_id], references: [id])
  conversationMessages  ConversationMessage[]

  @@map("learning_sessions")
}

model ConversationMessage {
  id               Int      @id @default(autoincrement())
  session_id       Int      @map("session_id")
  role             String   @db.VarChar(20)
  content          String
  timestamp        DateTime @default(now())
  message_metadata Json?

  session          LearningSession @relation(fields: [session_id], references: [id])

  @@map("conversation_messages")
}

model AnalyticsEvent {
  id         Int      @id @default(autoincrement())
  user_id    Int      @map("user_id")
  event_type String   @db.VarChar(50)
  event_data Json?
  timestamp  DateTime @default(now())
  ip_address String   @db.VarChar(45)
  user_agent String

  user       User     @relation(fields: [user_id], references: [id])

  @@map("analytics_events")
}

model UsageStats {
  id            Int     @id @default(autoincrement())
  client_id     String  @db.VarChar(100)
  service_type  String  @db.VarChar(50)
  date          String  @db.VarChar(10)
  request_count Int     @default(0)
  success_count Int     @default(0)

  @@map("usage_stats")
}

model SystemMetrics {
  id              Int      @id @default(autoincrement())
  metric_name     String   @db.VarChar(100)
  metric_value    Float
  timestamp       DateTime @default(now())
  metric_metadata Json?

  @@map("system_metrics")
}
